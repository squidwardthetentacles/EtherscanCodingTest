/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/sweetalert2@11.4.0/src/buttons-handlers.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{isVisible}from"./utils/dom/domUtils.js";import{getInputValue}from"./utils/dom/inputUtils.js";import{getDenyButton,getValidationMessage}from"./utils/dom/getters.js";import{asPromise,capitalizeFirstLetter,error}from"./utils/utils.js";import{showLoading}from"./staticMethods/showLoading.js";import{DismissReason}from"./utils/DismissReason.js";import privateProps from"./privateProps.js";export const handleConfirmButtonClick=e=>{const t=privateProps.innerParams.get(e);e.disableButtons(),t.input?handleConfirmOrDenyWithInput(e,"confirm"):confirm(e,!0)};export const handleDenyButtonClick=e=>{const t=privateProps.innerParams.get(e);e.disableButtons(),t.returnInputValueOnDeny?handleConfirmOrDenyWithInput(e,"deny"):deny(e,!1)};export const handleCancelButtonClick=(e,t)=>{e.disableButtons(),t(DismissReason.cancel)};const handleConfirmOrDenyWithInput=(e,t)=>{const i=privateProps.innerParams.get(e);if(!i.input)return error(`The "input" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(t)}`);const s=getInputValue(e,i);i.inputValidator?handleInputValidator(e,s,t):e.getInput().checkValidity()?"deny"===t?deny(e,s):confirm(e,s):(e.enableButtons(),e.showValidationMessage(i.validationMessage))},handleInputValidator=(e,t,i)=>{const s=privateProps.innerParams.get(e);e.disableInput();Promise.resolve().then((()=>asPromise(s.inputValidator(t,s.validationMessage)))).then((s=>{e.enableButtons(),e.enableInput(),s?e.showValidationMessage(s):"deny"===i?deny(e,t):confirm(e,t)}))},deny=(e,t)=>{const i=privateProps.innerParams.get(e||this);if(i.showLoaderOnDeny&&showLoading(getDenyButton()),i.preDeny){privateProps.awaitingPromise.set(e||this,!0);Promise.resolve().then((()=>asPromise(i.preDeny(t,i.validationMessage)))).then((i=>{!1===i?e.hideLoading():e.closePopup({isDenied:!0,value:void 0===i?t:i})})).catch((t=>rejectWith(e||this,t)))}else e.closePopup({isDenied:!0,value:t})},succeedWith=(e,t)=>{e.closePopup({isConfirmed:!0,value:t})},rejectWith=(e,t)=>{e.rejectPromise(t)},confirm=(e,t)=>{const i=privateProps.innerParams.get(e||this);if(i.showLoaderOnConfirm&&showLoading(),i.preConfirm){e.resetValidationMessage(),privateProps.awaitingPromise.set(e||this,!0);Promise.resolve().then((()=>asPromise(i.preConfirm(t,i.validationMessage)))).then((i=>{isVisible(getValidationMessage())||!1===i?e.hideLoading():succeedWith(e,void 0===i?t:i)})).catch((t=>rejectWith(e||this,t)))}else succeedWith(e,t)};
//# sourceMappingURL=/sm/1f3d43667c4aae30cf84a87ec4c887940c9414bbe799bee944147806b7578aba.map